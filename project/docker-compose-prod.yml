version: "3.8"
services:
  anti-fraud-analyzer:
    build:
      context: ./main/anti-fraud-analyzer
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6801:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  billing-handler:
    build:
      context: ./main/billing-handler
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6802:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  car-tracker:
    build:
      context: ./main/car-tracker
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6803:3000
    environment:
      - URL_ZONES_POLLUTION=http://zones-pollution-extern:3000
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  client-communication-service:
    build:
      context: ./main/client-communication-service
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6804:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  route-advisor:
    build:
      context: ./main/route-advisor
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6805:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  tracking-analytics:
    build:
      context: ./main/tracking-analytics
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6806:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  tracking-shutdown:
    build:
      context: ./main/tracking-shutdown
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6807:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  user-configurator:
    build:
      context: ./main/user-configurator
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6808:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  user-position-proxy:
    build:
      context: ./main/user-position-proxy
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6809:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  camera-checker:
    build:
      context: ./mocks/camera-checker
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6810:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  zones-pollution-extern:
    build:
      context: ./mocks/zones-pollution-extern
      dockerfile: ./Dockerfile
      target: development
    restart: always
    command: npm run start:dev
    ports:
      - 6811:3000
    environment:
      - APP_PORT=3000
    networks:
      - smartcity-al-b-network-prod

  tracking-infos-database:
    image: "mongo:4.4.15"
    restart: always
    ports:
      - 27020:27017
    networks:
      - smartcity-al-b-network-prod

  car-statistics-database:
    image: "mongo:4.4.15"
    restart: always
    ports:
      - 27021:27017
    networks:
      - smartcity-al-b-network-prod

  bills-database:
    image: "mongo:4.4.15"
    restart: always
    ports:
      - 27022:27017
    networks:
      - smartcity-al-b-network-prod

  tracking-shutdown-queue:
    image: 'rabbitmq:3-management'
    container_name: car-tracker-bus
    environment:
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
    ports:
      - 5672:5672
      - 15692:15692
    networks:
      - smartcity-al-b-network-prod

  zookeeper:
    container_name: smart-city-dev-zookeeper
    restart: unless-stopped
    image: 'wurstmeister/zookeeper'
    environment:
      zk_id: "1"
    expose:
      - 2181
    networks:
      - smartcity-al-b-network-prod

  kafka-event-bus:
    # container_name: soa-team-e-kafka
    restart: unless-stopped
    image: 'wurstmeister/kafka'
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka-event-bus
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: smart-city-dev-zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: "topic-poll:1:1,topic-poll-response:1:1,topic-rocket-event:1:1,topic-launch-event:1:1,topic-launch-order:1:1"
    expose:
      - 9092
    networks:
      - smartcity-al-b-network-prod

#  # setting up the mongodb exporter service. exposing the port 9001
#  mongo-exporter:
#    restart: 'always'
#    ports:
#      - '9216:9216'
#    image: percona/mongodb_exporter:2.32
#    environment:
#      - MONGODB_URI=mongodb://exporter:password@database:27017
#      #- 'MONGO_SERVICE=database'
#      #- 'MONGO_PORT=27017'
#    command:
#      - '--mongodb.uri=mongodb://exporter:password@database:27017'
#    depends_on:
#      - database
#    networks:
#      - smartcity-al-b-network-prod
#
#
#  alertmanager:
#    container_name: alertmanager
#    hostname: alertmanager
#    image: prom/alertmanager
#    user: "$UID:$GID"
#    volumes:
#      - ./monitoring/alertmanager.conf:/etc/alertmanager/alertmanager.conf
#    command:
#      - '--config.file=/etc/alertmanager/alertmanager.conf'
#    ports:
#      - 9093:9093
#    networks:
#      - smartcity-al-b-network-prod
#
#  prometheus:
#    container_name: prometheus
#    hostname: prometheus
#    image: prom/prometheus
#    user: "$UID:$GID"
#    volumes:
#      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
#      - ./monitoring/prometheus_volume:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#    links:
#      - alertmanager:alertmanager
#    ports:
#      - 9090:9090
#    networks:
#      - smartcity-al-b-network-prod
#
#  grafana:
#    container_name: grafana
#    hostname: grafana
#    image: grafana/grafana
#    user: "$UID:$GID"
#    volumes:
#      - ./monitoring/grafana_datasources.yml:/etc/grafana/provisioning/datasources/all.yaml
#      - ./monitoring/grafana_config.ini:/etc/grafana/config.ini
#      - ./monitoring/grafana_volume:/var/lib/grafana
#    ports:
#      - 3000:3000
#    networks:
#      - smartcity-al-b-network-prod

networks:
  smartcity-al-b-network-prod:
    driver: bridge
